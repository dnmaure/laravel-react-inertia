name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '20'
  MYSQL_VERSION: '8.0'
  REDIS_VERSION: 'alpine'
  APP_PATH: ${{ secrets.APP_PATH || '/var/www/laravel-app' }}
  BRANCH: ${{ secrets.BRANCH || 'main' }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'password' }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE || 'laravel_test' }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_mysql, phar, tokenizer, xml, zip, bcmath, curl, redis
        coverage: none
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Copy .env
      run: cp .env.example .env
    
    - name: Install Composer dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    
    - name: Generate key
      run: php artisan key:generate
    
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    
    - name: Create Database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -p${{ secrets.MYSQL_ROOT_PASSWORD || 'password' }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.MYSQL_DATABASE || 'laravel_test' }};"
    
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: ${{ secrets.DB_CONNECTION || 'mysql' }}
        DB_HOST: ${{ secrets.DB_HOST || '127.0.0.1' }}
        DB_PORT: ${{ secrets.DB_PORT || '3306' }}
        DB_DATABASE: ${{ secrets.MYSQL_DATABASE || 'laravel_test' }}
        DB_USERNAME: ${{ secrets.DB_USERNAME || 'root' }}
        DB_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'password' }}
        CACHE_DRIVER: ${{ secrets.CACHE_DRIVER || 'redis' }}
        SESSION_DRIVER: ${{ secrets.SESSION_DRIVER || 'redis' }}
        QUEUE_CONNECTION: ${{ secrets.QUEUE_CONNECTION || 'redis' }}
        REDIS_HOST: ${{ secrets.REDIS_HOST || '127.0.0.1' }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD || 'null' }}
        REDIS_PORT: ${{ secrets.REDIS_PORT || '6379' }}
      run: vendor/bin/phpunit
    
    - name: Install NPM dependencies
      run: npm ci
    
    - name: Build assets
      run: npm run build
    
    - name: Run linting
      run: npm run lint || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Build production assets
      run: |
        npm ci
        npm run build
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || '22' }}
        script: |
          cd ${{ env.APP_PATH }}
          git pull origin ${{ env.BRANCH }}
          docker-compose down
          docker-compose up -d --build
          docker-compose exec app composer install --no-dev --optimize-autoloader
          docker-compose exec node npm ci
          docker-compose exec node npm run build
          docker-compose exec app php artisan migrate --force
          docker-compose exec app php artisan config:cache
          docker-compose exec app php artisan route:cache
          docker-compose exec app php artisan view:cache
          docker-compose exec app chown -R www-data:www-data storage bootstrap/cache
          docker-compose exec app chmod -R 775 storage bootstrap/cache

